import express from 'express';
import cors from 'cors';
import path from 'path';
import { createTables, testConnection } from './shared/database';
import userRoutes from './interfaces/routes/userRoutes';
import postRoutes from './interfaces/routes/postRoutes';
import commentRoutes from './interfaces/routes/commentRoutes';
import myRoomRoutes from './interfaces/routes/myRoomRoutes';
import followRoutes from './interfaces/routes/followRoutes';
import notificationRoutes from './interfaces/routes/notificationRoutes';
// import profileRoutes from './interfaces/routes/profileRoutes';
// import matchingRoutes from './interfaces/routes/matchingRoutes';
// import chatRoutes from './interfaces/routes/chatRoutes';

const app = express();
const PORT = process.env['PORT'] || 3000;

// ÎØ∏Îì§Ïõ®Ïñ¥ ÏÑ§Ï†ï
app.use(cors());
app.use(express.json());

// Ï†ïÏ†Å ÌååÏùº ÏÑúÎπô (ÌÖåÏä§Ìä∏ ÌéòÏù¥ÏßÄÏö©)
app.use(express.static(path.join(__dirname, '..')));

// Î£®Ìä∏ Í≤ΩÎ°ú
app.get('/', (req, res) => {
  res.json({
    message: 'TEMPUS API Server',
    version: '1.0.0',
    status: 'running'
  });
});

// ÌÖåÏä§Ìä∏ ÌéòÏù¥ÏßÄ
app.get('/test', (req, res) => {
  res.sendFile(path.join(__dirname, '..', 'test.html'));
});

// Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÉÅÌÉú ÌôïÏù∏
app.get('/api/health/db', async (req, res) => {
  try {
    const isConnected = await testConnection();
    res.json({
      success: true,
      database: isConnected ? 'connected' : 'disconnected',
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      database: 'error',
      error: error.message,
      timestamp: new Date().toISOString()
    });
  }
});

// Ïã§Ï†ú API ÎùºÏö∞ÌÑ∞ ÏÇ¨Ïö©
app.use('/api/auth', userRoutes);
app.use('/api/posts', postRoutes);
app.use('/api', commentRoutes);
app.use('/api/myroom', myRoomRoutes);
app.use('/api/follow', followRoutes);
app.use('/api/notifications', notificationRoutes);

// Mock API ÏóîÎìúÌè¨Ïù∏Ìä∏Îì§
app.get('/api/posts', (req, res) => {
  // Mock Í≤åÏãúÍ∏Ä Îç∞Ïù¥ÌÑ∞
  const mockPosts = [
    {
      id: 'post_1',
      user_id: 'user_1',
      title: 'ÏïàÎÖïÌïòÏÑ∏Ïöî!',
      content: 'Ï≤´ Î≤àÏß∏ Í≤åÏãúÍ∏ÄÏûÖÎãàÎã§.',
      category: 'ÏûêÏú†',
      temperature_change: 0,
      likes: 5,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
      user: {
        nickname: 'ÌÖåÏä§Ìä∏Ïú†Ï†Ä',
        temperature: 36.5,
        email: 'test@example.com'
      }
    }
  ];
  
  res.json({
    success: true,
    data: {
      posts: mockPosts
    }
  });
});

app.get('/api/follow/following/:userId', (req, res) => {
  const { userId } = req.params;
  if (userId === 'undefined') {
    return res.status(400).json({
      success: false,
      error: 'ÏÇ¨Ïö©Ïûê IDÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§.'
    });
  }
  
  // Mock ÌåîÎ°úÏûâ Îç∞Ïù¥ÌÑ∞
  res.json({
    success: true,
    data: {
      following: []
    }
  });
});

app.get('/api/follow/followers/:userId', (req, res) => {
  const { userId } = req.params;
  if (userId === 'undefined') {
    return res.status(400).json({
      success: false,
      error: 'ÏÇ¨Ïö©Ïûê IDÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§.'
    });
  }
  
  // Mock ÌåîÎ°úÏõå Îç∞Ïù¥ÌÑ∞
  res.json({
    success: true,
    data: {
      followers: []
    }
  });
});

app.post('/api/follow', (req, res) => {
  // Mock ÌåîÎ°úÏö∞ ÏÑ±Í≥µ
  res.json({
    success: true,
    message: 'ÌåîÎ°úÏö∞ ÏÑ±Í≥µ'
  });
});

app.delete('/api/follow/:followingId', (req, res) => {
  // Mock Ïñ∏ÌåîÎ°úÏö∞ ÏÑ±Í≥µ
  res.json({
    success: true,
    message: 'Ïñ∏ÌåîÎ°úÏö∞ ÏÑ±Í≥µ'
  });
});

app.get('/api/follow/check/:followingId', (req, res) => {
  // Mock ÌåîÎ°úÏö∞ ÏÉÅÌÉú ÌôïÏù∏
  res.json({
    success: true,
    data: {
      isFollowing: false
    }
  });
});

// Mock ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ API Ï∂îÍ∞Ä
app.get('/api/users/profile/:userId', (req, res) => {
  const { userId } = req.params;
  
  if (!userId) {
    return res.status(400).json({
      success: false,
      error: 'ÏÇ¨Ïö©Ïûê IDÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§.'
    });
  }

  // Mock ÏÇ¨Ïö©Ïûê ÌîÑÎ°úÌïÑ Îç∞Ïù¥ÌÑ∞
  const mockProfile = {
    user: {
      id: userId,
      email: 'test@example.com',
      nickname: 'ÌÖåÏä§Ìä∏Ïú†Ï†Ä',
      temperature: 36.5,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    },
    stats: {
      total_posts: 1,
      total_likes: 5,
      total_followers: 0,
      total_following: 0
    }
  };

  res.json({
    success: true,
    data: mockProfile
  });
});

// Mock ÏÇ¨Ïö©Ïûê Í≤åÏãúÍ∏Ä API Ï∂îÍ∞Ä
app.get('/api/posts/user/:userId', (req, res) => {
  const { userId } = req.params;
  
  if (!userId) {
    return res.status(400).json({
      success: false,
      error: 'ÏÇ¨Ïö©Ïûê IDÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§.'
    });
  }

  // Mock ÏÇ¨Ïö©Ïûê Í≤åÏãúÍ∏Ä Îç∞Ïù¥ÌÑ∞
  const mockUserPosts = [
    {
      id: 'post_1',
      user_id: userId,
      title: 'ÏïàÎÖïÌïòÏÑ∏Ïöî!',
      content: 'Ï≤´ Î≤àÏß∏ Í≤åÏãúÍ∏ÄÏûÖÎãàÎã§.',
      category: 'ÏûêÏú†',
      temperature_change: 0,
      likes: 5,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
      user: {
        nickname: 'ÌÖåÏä§Ìä∏Ïú†Ï†Ä',
        temperature: 36.5,
        email: 'test@example.com'
      }
    }
  ];

  res.json({
    success: true,
    data: {
      posts: mockUserPosts
    }
  });
});

// ÎûúÎç§ Îß§Ïπ≠ ÏãúÏä§ÌÖú API ÎùºÏö∞ÌÑ∞
// app.use('/api/profile', profileRoutes);
// app.use('/api/matching', matchingRoutes);
// app.use('/api/chat', chatRoutes);

// 404 Ìï∏Îì§Îü¨
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    error: 'API ÏóîÎìúÌè¨Ïù∏Ìä∏Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.'
  });
});

// Lambda Ìï∏Îì§Îü¨ (serverlessÏö©)
const serverless = require('serverless-http');

// Lambda ÌôòÍ≤ΩÏóêÏÑú Express Ïï±ÏùÑ ÎûòÌïë
const serverlessHandler = serverless(app);

exports.handler = async (event, context) => {
  try {
    // Lambda ÌôòÍ≤ΩÏóêÏÑú Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÌôïÏù∏
    if (process.env.AWS_LAMBDA_FUNCTION_NAME) {
      console.log('üîå Lambda ÌôòÍ≤ΩÏóêÏÑú Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÌôïÏù∏...');
      await createTables();
      console.log('‚úÖ Lambda ÌôòÍ≤Ω Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÏôÑÎ£å');
    }
    
    // serverless-httpÎ°ú Express Ïï± Ïã§Ìñâ
    return await serverlessHandler(event, context);
  } catch (error) {
    console.error('‚ùå Lambda Ìï∏Îì§Îü¨ Ïò§Î•ò:', error);
    return {
      statusCode: 500,
      body: JSON.stringify({
        success: false,
        error: 'Lambda Ìï∏Îì§Îü¨ Ïò§Î•ò',
        message: error.message
      })
    };
  }
};

// Express Ïï± ÏãúÏûë (Ìï≠ÏÉÅ Ïã§Ìñâ)
const startServer = async () => {
  try {
    // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ Î∞è ÌÖåÏù¥Î∏î ÏÉùÏÑ±
    console.log('üîå Connecting to database...');
    await createTables();
    console.log('‚úÖ Database setup completed');
    
    // ÏÑúÎ≤Ñ ÏãúÏûë
    app.listen(PORT, () => {
      console.log(`üöÄ Server is running on port ${PORT}`);
      console.log(`üìö Real APIs available at:`);
      console.log(`   POST /api/auth/register`);
      console.log(`   POST /api/auth/login`);
      console.log(`   GET  /api/auth/check-nickname`);
      console.log(`   GET  /api/auth/temperature`);
      console.log(`   POST /api/posts`);
      console.log(`   GET  /api/posts`);
      console.log(`   GET  /api/posts/:id`);
      console.log(`   POST /api/posts/:postId/comments`);
      console.log(`   GET  /api/posts/:postId/comments`);
      console.log(`   GET  /api/comments/:id`);
      console.log(`   GET  /api/health/db`);
      console.log(`   POST /api/myroom`);
      console.log(`   GET  /api/myroom`);
      console.log(`   PATCH /api/myroom/temperature`);
      console.log(`   POST /api/myroom/items`);
      console.log(`   GET  /api/myroom/items`);
      console.log(`   POST /api/follow`);
      console.log(`   GET  /api/follow/followers/:userId`);
      console.log(`   GET  /api/follow/following/:userId`);
      console.log(`   GET  /api/follow/stats/:userId`);
      console.log(`üåê Test page: http://localhost:${PORT}/test`);
    });
  } catch (error) {
    console.error('‚ùå Failed to start server:', error);
    process.exit(1);
  }
};

startServer();

module.exports = app;
